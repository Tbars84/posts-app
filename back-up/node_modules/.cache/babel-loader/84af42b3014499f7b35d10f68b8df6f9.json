{"ast":null,"code":"import _objectSpread from \"/Users/camilo_tabares/Desktop/react/code-challenge/support-files/post-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport { routerMiddleware, push } from 'react-router-redux'; // Apply the middleware to the store\n\nvar middleware = routerMiddleware(browserHistory);\nvar store = createStore(reducers, applyMiddleware(middleware));\nvar initState = {\n  authERROR: null\n};\n\nvar authReducer = function authReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case 'LOGIN_ERROR':\n      return _objectSpread({}, state, {\n        authERROR: 'Login Failed'\n      });\n\n    case 'LOGIN_SUCCESS':\n      // browserHistory.push('/dashBoard')\n      return _objectSpread({}, state, {\n        authERROR: null\n      });\n\n    case 'SIGNOUT_SUCCESS':\n      console.log('signout success');\n      return state;\n\n    default:\n      return state;\n  }\n};\n\nexport default authReducer;","map":{"version":3,"sources":["/Users/camilo_tabares/Desktop/react/code-challenge/support-files/post-app/src/app/store/reducers/authReducer.js"],"names":["routerMiddleware","push","middleware","browserHistory","store","createStore","reducers","applyMiddleware","initState","authERROR","authReducer","state","action","type","console","log"],"mappings":";AAAA,SAASA,gBAAT,EAA2BC,IAA3B,QAAuC,oBAAvC,C,CAEA;;AACA,IAAMC,UAAU,GAAGF,gBAAgB,CAACG,cAAD,CAAnC;AACA,IAAMC,KAAK,GAAGC,WAAW,CACvBC,QADuB,EAEvBC,eAAe,CAACL,UAAD,CAFQ,CAAzB;AAKA,IAAMM,SAAS,GAAG;AAChBC,EAAAA,SAAS,EAAE;AADK,CAAlB;;AAIA,IAAMC,WAAW,GAAG,SAAdA,WAAc,GAA+B;AAAA,MAA9BC,KAA8B,uEAAtBH,SAAsB;AAAA,MAAXI,MAAW;;AACjD,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,aAAL;AACE,+BAAWF,KAAX;AAAoBF,QAAAA,SAAS,EAAE;AAA/B;;AACF,SAAK,eAAL;AACE;AACA,+BAAWE,KAAX;AAAoBF,QAAAA,SAAS,EAAE;AAA/B;;AACF,SAAK,iBAAL;AACEK,MAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ;AACA,aAAOJ,KAAP;;AACF;AACE,aAAOA,KAAP;AAVJ;AAYD,CAbD;;AAeA,eAAeD,WAAf","sourcesContent":["import { routerMiddleware, push } from 'react-router-redux'\n\n// Apply the middleware to the store\nconst middleware = routerMiddleware(browserHistory)\nconst store = createStore(\n  reducers,\n  applyMiddleware(middleware)\n)\n\nconst initState = {\n  authERROR: null\n}\n\nconst authReducer = (state = initState, action) => {\n  switch (action.type) {\n    case 'LOGIN_ERROR':\n      return {...state ,  authERROR: 'Login Failed'}\n    case 'LOGIN_SUCCESS':\n      // browserHistory.push('/dashBoard')\n      return {...state ,  authERROR: null}\n    case 'SIGNOUT_SUCCESS':\n      console.log('signout success');\n      return state\n    default:\n      return state;\n  }\n};\n\nexport default authReducer;"]},"metadata":{},"sourceType":"module"}