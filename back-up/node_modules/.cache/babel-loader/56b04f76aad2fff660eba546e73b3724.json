{"ast":null,"code":"export var signIn = function signIn(credentials) {\n  return function (dispatch, getState, _ref) {\n    var getFirebase = _ref.getFirebase;\n    var firebase = getFirebase();\n    firebase.auth(); // *****************************\n    // EMAIL AND PASS PROVIDER\n    // const providerMail = new firebase.auth.signInWithEmailAndPassword(\n    //   credentials.email,\n    //   credentials.password\n    // ).then(() => {\n    //   dispatch({ type: 'LOGIN_SUCCESS' });\n    // }).catch((err) => {\n    //   dispatch({ type: 'LOGIN_ERROR', err });\n    // })\n    // *****************************\n    // GIT PROVIDER SIGNUP\n\n    var providerGith = new firebase.auth.GithubAuthProvider();\n    providerGith.addScope('repo');\n    firebase.auth().signInWithPopup(provider).then(function (result) {\n      // var token = result.credential.accessToken;\n      // var user = result.user;\n      dispatch({\n        type: 'LOGIN_SUCCESS'\n      });\n    }).catch(function (error) {\n      // var errorCode = error.code;\n      // var errorMessage = error.message;\n      // var email = error.email;\n      // var credential = error.credential;\n      dispatch({\n        type: 'LOGIN_ERROR',\n        error: error\n      });\n\n      if (errorCode === 'auth/account-exists-with-different-credential') {\n        alert('You have signed up with a different provider for that email.');\n      } else {\n        console.error(error);\n      }\n    });\n  };\n};","map":{"version":3,"sources":["/Users/camilo_tabares/Desktop/react/code-challenge/support-files/post-app/src/app/store/actions/actions.js"],"names":["signIn","credentials","dispatch","getState","getFirebase","firebase","auth","providerGith","GithubAuthProvider","addScope","signInWithPopup","provider","then","result","type","catch","error","errorCode","alert","console"],"mappings":"AAAA,OAAO,IAAMA,MAAM,GAAG,SAATA,MAAS,CAACC,WAAD,EAAiB;AACrC,SAAO,UAACC,QAAD,EAAWC,QAAX,QAAuC;AAAA,QAAjBC,WAAiB,QAAjBA,WAAiB;AAC5C,QAAMC,QAAQ,GAAGD,WAAW,EAA5B;AACAC,IAAAA,QAAQ,CAACC,IAAT,GAF4C,CAG5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AACA,QAAMC,YAAY,GAAG,IAAIF,QAAQ,CAACC,IAAT,CAAcE,kBAAlB,EAArB;AACAD,IAAAA,YAAY,CAACE,QAAb,CAAsB,MAAtB;AACAJ,IAAAA,QAAQ,CAACC,IAAT,GAAgBI,eAAhB,CAAgCC,QAAhC,EAA0CC,IAA1C,CAA+C,UAASC,MAAT,EAAiB;AAC9D;AACA;AACAX,MAAAA,QAAQ,CAAC;AAAEY,QAAAA,IAAI,EAAG;AAAT,OAAD,CAAR;AACD,KAJD,EAIGC,KAJH,CAIS,UAASC,KAAT,EAAgB;AACvB;AACA;AACA;AACA;AAEAd,MAAAA,QAAQ,CAAC;AAAEY,QAAAA,IAAI,EAAG,aAAT;AAAyBE,QAAAA,KAAK,EAALA;AAAzB,OAAD,CAAR;;AAEA,UAAIC,SAAS,KAAK,+CAAlB,EAAmE;AAC/DC,QAAAA,KAAK,CAAC,8DAAD,CAAL;AACD,OAFH,MAES;AACLC,QAAAA,OAAO,CAACH,KAAR,CAAcA,KAAd;AACD;AACJ,KAjBD;AAkBD,GApCD;AAqCD,CAtCM","sourcesContent":["export const signIn = (credentials) => {\n  return (dispatch, getState, {getFirebase}) => {\n    const firebase = getFirebase();    \n    firebase.auth()\n    // *****************************\n    // EMAIL AND PASS PROVIDER\n    // const providerMail = new firebase.auth.signInWithEmailAndPassword(\n    //   credentials.email,\n    //   credentials.password\n    // ).then(() => {\n    //   dispatch({ type: 'LOGIN_SUCCESS' });\n    // }).catch((err) => {\n    //   dispatch({ type: 'LOGIN_ERROR', err });\n    // })\n    // *****************************\n\n    // GIT PROVIDER SIGNUP\n    const providerGith = new firebase.auth.GithubAuthProvider();\n    providerGith.addScope('repo');\n    firebase.auth().signInWithPopup(provider).then(function(result) {\n      // var token = result.credential.accessToken;\n      // var user = result.user;\n      dispatch({ type : 'LOGIN_SUCCESS'})\n    }).catch(function(error) {\n      // var errorCode = error.code;\n      // var errorMessage = error.message;\n      // var email = error.email;\n      // var credential = error.credential;\n\n      dispatch({ type : 'LOGIN_ERROR' , error})\n\n      if (errorCode === 'auth/account-exists-with-different-credential') {\n          alert('You have signed up with a different provider for that email.');\n        } else {\n          console.error(error);\n        }\n    });    \n  }\n}"]},"metadata":{},"sourceType":"module"}